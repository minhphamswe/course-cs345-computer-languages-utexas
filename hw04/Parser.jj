/**
 * Student: Minh Pham
 * UTEID: mlp2279
 * CSID: minhpham
 * Section: TTh 5:30-6:00pm
 * TA: benself
 * 
 * Homework 4 - Problem 3:
 * Write a parser in javacc that converts scheme let expressions to
 * lambda applications as shown in PLAI 3 & HLL 3, page 3.
 * 
 * Hint: You might want to take the crono grammar, remove the crono
 * ast items, the actions and return values from non­terminals and then
 * add your own return values and actions.
 * 
 * The output from the following expression:
 * 
 * echo "(let ((H .001)) (let ((f (lambda (x) (* x x x x)))) (let ((d/dx (lambda (x) (/ (­ (f (+ x H))(f x)) H)))) (d/dx 10))))" | java Parser
 * 
 * should look something like the following:
 * ( (lambda (H) ( (lambda (f) ( (lambda (d/dx) ( d/dx 10))( lambda( x)( /( ­( f( + x H))( f x)) H))))( lambda( x)(
* x x x x)))) .001)
 */
options {
}

PARSER_BEGIN(Parser)

//package edu.utexas.minhpham.lobo;

import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

class Cons {
    private Object car;
    private Cons cdr;
    
    public Cons(Object car_, Cons cdr_) {
        this.car = car_;
        this.cdr = cdr_;
    }
    
    public static Object car(Cons lst) {
        return (lst == null) ? null : lst.car;
    }
    
    public static Cons cdr(Cons lst) {
        return (lst == null) ? null : lst.cdr;
    }
    
    public static Cons cons(Object first, Cons rest) {
        return new Cons(first, rest);
    }
    
    public static boolean consp (Object o) {
        return ( (o != null) && (o instanceof Cons) );
    }
    
    public static Cons list(Object ... elems) {
       Cons list = null;
       for (int i = elems.length-1; i >= 0; i--) {
           list = cons(elems[i], list);
       }
       return list;
   }
    
    public String toString() {
        return toString(this);
    }
    
    public static String toString(Cons lst) {
        return "(" + toStringInternal(lst);
    }
    
    public static String toStringInternal(Cons lst) {
        return ((lst == null) ? ")"
                                : ((car(lst) == null) ? "()" : car(lst).toString())
                                + ((cdr(lst) == null) ? ")" : " " + toStringInternal(cdr(lst))));
   }
}

public class Parser {
    public static void main(String args[]) throws ParseException {
        Parser parser = new Parser (System.in);
        parser.parse();
    }
}

PARSER_END(Parser)

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r")> 
}

TOKEN:
{
      < LPAREN  : "(" >
    | < RPAREN  : ")" >
    | < LCURLY  : "{" >
    | < RCURLY  : "}" >
    | < SCOLON  : ";" >             // Comment marker
    | < DOT     : "." >

    | < QUOTE   : "'" >             // Quote
    | < BKQUOTE : "`" >             // Backquote
    | < COMMA   : "," >             // Backquote exit
}

TOKEN:  /* Literals */
{
      < INTEGER: (["0"-"9"])+ | "-" (["0"-"9"])+ >
    | < DOUBLE : (["0"-"9"])+"."(["0"-"9"])+ | "-" (["0"-"9"])+"."(["0"-"9"])+ >
    | < STRING : "\"" (["a"-"z", "A"-"Z"," ",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]","(",")", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?","'","%"])* "\"" >
    | < SYMBOL : (["a"-"z", "A"-"Z",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?", "'", "\""])+ >
}

Object number():
{ Token n; }
{
      n = <INTEGER>   { return new Integer(""+n); }
    | n = <DOUBLE>    { return new Float(""+n); }
}

Object atom():
{ Token n; }
{
    n = <DOUBLE>  { return new Float(""+n); }
  | n = <STRING>  { return new String(""+n); }
  | n = <INTEGER> { return new Integer(""+n); }
  | n = <SYMBOL>   { return new String(""+n); }
}

// Parsing inside a list environment
Cons list() :
{ Object o; }
{
      o = atom()                    { return Cons.cons(o, list()); }
    | <LPAREN> o = list()           { return Cons.cons(o, list()); }
    | <RPAREN>                      { return null; }
    | <EOF>     { throw new ParseException("Mismatched parenthesis."); }
}

// Applying function car to cdr
//~ Object apply(Object fun, Cons lst) :
//~ { }
//~ { 
    //~ { 
    //~ if (fun.toString().equals("let")) {
        //~ Object a = Cons.car((Cons) Cons.car((Cons) Cons.car(lst)));
        //~ Object b = Cons.car(Cons.cdr((Cons) Cons.car((Cons) Cons.car(lst))));
        //~ Object c = Cons.car(Cons.cdr(lst));
        //~ Cons lambda = Cons.list(Cons.list("lambda", Cons.list(a), apply(Cons.car((Cons)c), Cons.cdr((Cons) c)), b));
        //~ return lambda;
        //~ 
    //~ }
    //~ else {
        //~ throw new ParseException("Unknown function: " + fun);
    //~ }
    //~ return fun;
    //~ }
//~ }

Object eval(Object sexp) :
{ }
{
    {
        if (Cons.consp(sexp)) {
            Object fun = Cons.car((Cons) sexp);
            Cons lst = Cons.cdr((Cons) sexp);
            
            if (fun.toString().equals("let")) {
                Object a = Cons.car((Cons) Cons.car((Cons) Cons.car(lst)));
                Object b = Cons.car(Cons.cdr((Cons) Cons.car((Cons) Cons.car(lst))));
                Object c = Cons.car(Cons.cdr(lst));
                Cons lambda = Cons.list(Cons.list("lambda", Cons.list(a), eval(c)), b);
                return lambda;
                //~ return c;
            }
            else {
                return sexp;
                //~ throw new ParseException("Unknown function: " + fun);
            }
        }
        else {
            return sexp;
        }
    }
}

// Parsing in global environment
void parse():
{ Object o; }
{
    o = atom()                              { System.out.print("(num " + o +")"); }
    | <QUOTE><LPAREN> o = list()            { System.out.print(o); }
    | <LPAREN> o = eval(list())             { System.out.print(o); }
    { System.out.println(); }
}
